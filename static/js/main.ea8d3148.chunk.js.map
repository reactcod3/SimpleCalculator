{"version":3,"sources":["containers/Calculator/Calculator.module.css","containers/Calculator/Calculator.js","components/Display/Display.js","components/Display/Display.module.css","components/Buttons/Buttons.js","components/Buttons/Buttons.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calculator","state","result","buttonClick","btnType","includes","setState","eval","className","styles","join","row","this","clicked","Component","Display","props","useStyles","makeStyles","theme","button","color","backgroundColor","width","height","marginTop","marginBottom","Buttons","onClick","variant","Button","operatorButton","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea8d3148.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calculator\":\"Calculator_Calculator__32tFN\",\"row\":\"Calculator_row__3J6lO\"};","import React, { Component } from 'react';\r\nimport Display from '../../components/Display/Display';\r\nimport styles from './Calculator.module.css';\r\nimport Buttons from '../../components/Buttons/Buttons';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nclass Calculator extends Component{\r\n    state={result:\"0\"}\r\n    buttonType\r\n    buttonClick = (btnType)=>{\r\n        if(['1','2','3','4','5','6','7','8','9','0', '+','-','/', '*'].includes(btnType)){\r\n            \r\n            if (this.state.result === \"0\"){\r\n                this.setState({result: btnType});\r\n            }\r\n            \r\n            else{\r\n                this.setState({result: this.state.result + btnType});\r\n            }\r\n        }\r\n        else if (btnType === \"clear\"){\r\n            this.setState({result: \"0\"});\r\n        }\r\n        else if (btnType === \"=\"){\r\n            this.setState({result: eval(this.state.result)});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n           \r\n                    <div className={['container-fluid', styles.Calculator].join(' ')}>\r\n                        <div className={['row', styles.row].join(' ')}>\r\n                            <div className=\"col-12\">\r\n                                <Display result={this.state.result}></Display>\r\n                            </div>\r\n                        </div>\r\n                        <div className={['row', styles.row].join(' ')}>\r\n                            <div className=\"col-12\">\r\n                            <Buttons clicked={this.buttonClick}/>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                \r\n            \r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport styles from './Display.module.css';\r\n\r\nconst Display = (props)=>(\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-12\">\r\n            <div className={styles.Display}>{props.result}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n);\r\n\r\nexport default Display;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__2WDGK\"};","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport styles from './Buttons.module.css';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        color: 'white',\r\n        backgroundColor: 'primary',\r\n        width:\"100%\",\r\n        height:\"80%\",\r\n        marginTop: \"5px !important\",\r\n        marginBottom: \"5px !important\"\r\n    }\r\n    }));\r\n\r\nconst Buttons = (props)=>{\r\n\r\n    //console.log(props.clicked(\"7\"));\r\n    const classes = useStyles();\r\n\r\n    return (\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-6\">\r\n                <Button onClick={()=>{props.clicked(\"clear\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    clear\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"*\")}} variant=\"outlined\" color=\"primary\" className={styles.operatorButton}>\r\n                    *\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"/\")}} variant=\"outlined\" color=\"primary\" className={styles.operatorButton}>\r\n                    /\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"7\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    7\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"8\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    8\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"9\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    9\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"-\")}} variant=\"outlined\" color=\"primary\" className={styles.operatorButton}>\r\n                    -\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"4\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                   4\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"5\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    5\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"6\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    6\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"+\")}} variant=\"outlined\" color=\"primary\" className={styles.operatorButton}>\r\n                    +\r\n                </Button>\r\n            </div>\r\n        </div>\r\n        <div className=\"row\">\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"1\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    1\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"2\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    2\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"3\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    3\r\n                </Button>\r\n            </div>\r\n            <div className=\"col-3\">\r\n                <Button onClick={()=>{props.clicked(\"=\")}} variant=\"outlined\" color=\"primary\" className={styles.Button}>\r\n                    =\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)};\r\n\r\nexport default Buttons;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Buttons_Button__EtosR\",\"operatorButton\":\"Buttons_operatorButton__2sWGn\"};","import React from 'react';\nimport './App.css';\nimport Calculator from '../src/containers/Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"container mainContainer\" >\n      <div className=\"row mainRow\">\n        <div className=\"col-3\"></div>\n        <div className=\"col-6 flexBox\">\n            <Calculator />\n        </div>\n        <div className=\"col-3\"></div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}